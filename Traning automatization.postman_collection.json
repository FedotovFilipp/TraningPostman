{
	"info": {
		"_postman_id": "ef10c8a6-1d04-4e8e-9ba2-59af38bb60c9",
		"name": "Traning automatization",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19719428"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Set Schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let CompanyList = { // Объявляем переменную значение которой сгенерированая схема из Swagger, для дальнейшего использования в тестах\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": \r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"company_id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"company_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_address\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_status\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [\"ACTIVE\", \"CLOSED\", \"BANKRUPT\"] \r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"company_id\",\r",
									"                    \"company_name\",\r",
									"                    \"company_address\",\r",
									"                    \"company_status\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        },\r",
									"        \"meta\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"total\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"total\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"data\",\r",
									"        \"meta\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let Company = { \r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"company_id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"company_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company_address\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company_status\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\r",
									"                \"ACTIVE\",\r",
									"                \"BANKRUPT\",\r",
									"                \"CLOSED\"\r",
									"            ]\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description_lang\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"translation_lang\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [\r",
									"                            \"EN\",\r",
									"                            \"RU\",\r",
									"                            \"PL\",\r",
									"                            \"UA\"\r",
									"                        ]\r",
									"                    },\r",
									"                    \"translation\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"translation_lang\",\r",
									"                    \"translation\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"company_id\",\r",
									"        \"company_name\",\r",
									"        \"company_address\",\r",
									"        \"company_status\",\r",
									"    ]\r",
									"};\r",
									"\r",
									"let UsersList = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"meta\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"total\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"total\"\r",
									"            ]\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"first_name\": {\r",
									"                        \"type\": [\"string\", \"null\"]\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_id\": {\r",
									"                        \"type\": [\"integer\", \"null\"]\r",
									"                    },\r",
									"                    \"user_id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"last_name\",\r",
									"                    \"user_id\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"meta\",\r",
									"        \"data\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"\r",
									"let ResponseUser = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"first_name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"last_name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"company_id\": {\r",
									"            \"type\": \"integer\",\r",
									"        },\r",
									"        \"user_id\": {\r",
									"            \"type\": \"integer\",\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"last_name\",\r",
									"        \"user_id\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let HTTPValidationError = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"loc\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": {\r",
									"                            \"type\": [\r",
									"                                \"string\",\r",
									"                                \"integer\"\r",
									"                            ]\r",
									"                        }\r",
									"                    },\r",
									"                    \"msg\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"loc\",\r",
									"                    \"msg\",\r",
									"                    \"type\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let MeResponse = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"user_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"email_address\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"email\"\r",
									"        },\r",
									"        \"valid_till\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"token\",\r",
									"        \"user_name\",\r",
									"        \"email_address\",\r",
									"        \"valid_till\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let DetailReason = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"reason\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"reason\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"let tokenschema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"user_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"email_address\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"email\"\r",
									"        },\r",
									"        \"valid_till\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"token\",\r",
									"        \"user_name\",\r",
									"        \"email_address\",\r",
									"        \"valid_till\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.environment.set(\"CompanyList\", JSON.stringify(CompanyList)); // Устанавливаем переменную CompanyList в переменные окружения для дальнейшего переиспользовать. Методом JSON.stringify() преобразует объект в строку\r",
									"pm.environment.set(\"Company\", JSON.stringify(Company)); \r",
									"pm.environment.set(\"UsersList\", JSON.stringify(UsersList));\r",
									"pm.environment.set(\"ResponseUser\", JSON.stringify(ResponseUser));\r",
									"pm.environment.set(\"HTTPValidationError\", JSON.stringify(HTTPValidationError));\r",
									"pm.environment.set(\"MeResponse\", JSON.stringify(MeResponse));\r",
									"pm.environment.set(\"DetailReason\", JSON.stringify(DetailReason));\r",
									"pm.environment.set(\"tokenschema\", JSON.stringify(tokenschema));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "companies",
			"item": [
				{
					"name": "PM-1 CompaniesDefaultRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { // Ответ от сервера должен иметь статус код  200\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Len of JSON with default limit\", function() { // Проверка работы query-параметра limit по умолчанию\r",
									"    let companiesCount = pm.response.json().data.length; // Объявлена переменная значение которой является количество компаний из json.data\r",
									"    pm.expect(companiesCount).to.eql(3); // Ожидается что количество компаний из json.data равняется 3\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\")); //Объявлена переменная значением которой является переменная окружения. Методом JSON.parse() преобразует строку в объект\r",
									"\r",
									"pm.test('Schema is valid', function() { //Проверка валидации json схемы\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-2 CompaniesWithoutSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () { // Ответ от сервера должен иметь статус код  301\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() { \r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\") // Ответ ожидается по протоколу http\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://restapi.tech/api/companies",
							"protocol": "http",
							"host": [
								"restapi",
								"tech"
							],
							"path": [
								"api",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-3 CompaniesWithLimitAndOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is success\", function () { // Ответ от сервера должен иметь успешный статус\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Len of JSON with limit=5\", function() { // Проверка работы query-параметра limit = 5\r",
									"    let companiesCount = pm.response.json().data.length; // Объявена переменная значением которой является количество компаний из из json.data\r",
									"    pm.expect(companiesCount).to.eql(5); //ожидается что переменная \"companiesCount\" должна быть эквивалентна 5\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset\", function() { // Проверка работы query-параметра offset = 3\r",
									"    pm.expect(pm.response.json().data[0].company_id).to.eql(3); //ожидается что нулевой индекс \"company_id\" из массива \"data\" эквивалентен 3 компании из \"json.data\"\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\")); //Объявлена переменная значением которой является переменная окружения. Методом JSON.parse() преобразует строку в объект\r",
									"pm.test('Schema is valid', function() { //Проверка валидации json схемы\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?limit=5&offset=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-4 CompaniesACTIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify company status\", function(){ \r",
									"    for(let company of pm.response.json().data){ // Объявляется переменную company, которая циклом \"пробежится\" по ключу data\r",
									"        pm.expect(company.company_status).to.be.eql(\"ACTIVE\"); // В каждой итерации обращается к ключу company_status и проверяется, что значение равно \"ACTIVE\"\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-5 CompaniesCLOSED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify company status\", function(){ \r",
									"    for (let company of pm.response.json().data){ // Объявляется переменную company, которая циклом \"пробежится\" по ключу data\r",
									"        pm.expect(company.company_status).to.be.eql(\"CLOSED\"); //В каждой итерации обращается к ключу company_status и проверяется, что значение равно \"CLOSED\"\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=CLOSED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "CLOSED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-6 CompaniesBANKRUPT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify company status\", function(){\r",
									"    for(let company of pm.response.json().data){  // Объявляется переменную company, которая циклом \"пробежится\" по ключу data\r",
									"        pm.expect(company.company_status).to.be.eql(\"BANKRUPT\"); // В каждой итерации обращается к ключу company_status и проверяется, что значение равно \"BANKRUPT\"\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=BANKRUPT",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "BANKRUPT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-7 CompaniesWithInvQueryStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-8 CompaniesWithInvQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { // Тест должен упасть\r",
									"    pm.response.to.have.status(422); \r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\")); // Тест должен упасть\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?limit=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-9 CompaniesWithStrQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?limit=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-10 CompaniesWithInvQueryOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Len of JSON with default limit\", function() { \r",
									"    let companiesCount = pm.response.json().data.length; // Объявлена переменная значение которой является количество компаний из json.data\r",
									"    pm.expect(companiesCount).to.eql(3); // Ожидается что переменная \"companiesCount\" должна быть эквивалентна 3\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset\", function() { \r",
									"    pm.expect(pm.response.json().data[0].company_id).to.eql(1); // Обращается к нулевому индексу, где находится первая компания, с учетом фильтрации. Далее обращение к свойству company_id и проверка значения этого свойства\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?offset=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-11 CompaniesWithInvStrQueryOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?offset=one",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "offset",
									"value": "one"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-12 CompanyById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"id in URI to eql id in JSON\", function () { //проверка что id из URL совпадает с company_id из json\r",
									"    let idURL = parseInt(pm.request.url.path[2]); // в переменной idURL сохраняется значение id из URL\r",
									"    let idJSON = pm.response.json().company_id; // в переменной idJSON сохраняется значение company_id из JSON\r",
									"    pm.expect(idURL).to.eql(idJSON); // этим выражением проверяется, что оба значения равны.\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() { // Проверка наличия ключей description или description_lang\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\") // Определяется наличия хотя бы одного из ключей. Если первый, второй ключи отсутствуют, тест выдается ошибка. В аргументах передаются проверяемые ключи.\r",
									"});\r",
									"\r",
									"if (pm.response.json().description_lang) { //выполняется при отсутствии ключа \"description\" и наличия \"description_lang\"\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")} //Указывается путь до первого ключа \"translation_lang\" и проверяется, что значение этого ключа \"EN\"\r",
									"    )};\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-13 CompanyByNonexId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-14 CompanyByIdLangRU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"id in URI to eql id in JSON\", function () { //проверка что id из URL совпадает с company_id из json\r",
									"    let idURL = parseInt(pm.request.url.path[2]); // в переменной idURL сохраняется значение id из URL\r",
									"    let idJSON = pm.response.json().company_id; // в переменной idJSON сохраняется значение company_id из JSON\r",
									"    pm.expect(idURL).to.eql(idJSON); // этим выражением проверяется, что оба значения равны.\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() { // Проверка наличия ключей description или description_lang\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\") // Определяется наличия хотя бы одного из ключей. Если первый, второй ключи отсутствуют, тест выдается ошибка. В аргументах передаются проверяемые ключи.\r",
									"});\r",
									"\r",
									"if (pm.response.json().description_lang) { //выполняется при отсутствии ключа \"description\" и наличия \"description_lang\"\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")} //Указывается путь до первого ключа \"translation_lang\" и проверяется, что значение этого ключа \"EN\"\r",
									"    )};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "RU",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-15 CompanyByIdInvLang",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"id in URI to eql id in JSON\", function () { //проверка что id из URL совпадает с company_id из json\r",
									"    let idURL = parseInt(pm.request.url.path[2]); // в переменной idURL сохраняется значение id из URL\r",
									"    let idJSON = pm.response.json().company_id; // в переменной idJSON сохраняется значение company_id из JSON\r",
									"    pm.expect(idURL).to.eql(idJSON); // этим выражением проверяется, что оба значения равны.\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() { // Проверка наличия ключей description или description_lang\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\") // Определяется наличия хотя бы одного из ключей. Если первый, второй ключи отсутствуют, тест выдается ошибка. В аргументах передаются проверяемые ключи.\r",
									"});\r",
									"\r",
									"if (pm.response.json().description_lang) { //выполняется при отсутствии ключа \"description\" и наличия \"description_lang\"\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")} //Указывается путь до первого ключа \"translation_lang\" и проверяется, что значение этого ключа \"EN\"\r",
									"    )};\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "AM",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "PM-16 UsersWithLimit&Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Len of JSON with limit=5\", function() { // Проверка работы query-параметра limit равно 10\r",
									"    let companiesCount = pm.response.json().data.length; \r",
									"    pm.expect(companiesCount).to.eql(10); \r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"let offset = pm.variables.get(\"offset\"); // Объявление переменной значение которой offset=5 из локальной переменной установленной в Pre-request\r",
									"\r",
									"pm.test(\"Verify offset\", function() {\r",
									"    pm.expect(DataJson[0].user_id).to.eql(offset); // Проверка что нулевой индекс из \"response.json().data\" равен offset 5 \r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"UsersList\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"https://restapi.tech/api/users?limit=10\", function (err, response) { //указывается URI запроса откуда нужно забрать данные\r",
									"    pm.variables.set(\"offset\", response.json().data[5].user_id); //указывается, какие данные засетаются в локальную переменную\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users?limit=10&offset=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-17 UsersWithInvQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { // Тест должен упасть\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\")); // Тест должен упасть\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users?limit=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-18 UsersWithStrLimit&Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users?limit=abc&offset=abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "abc"
								},
								{
									"key": "offset",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-19 UsersWithoutSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() { \r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\") //ответ ожидается по протоколу http\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://restapi.tech/api/users",
							"protocol": "http",
							"host": [
								"restapi",
								"tech"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-20 UserCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"user_id\", pm.response.json().user_id); // Установка данных в переменную коллекции\r",
									"pm.collectionVariables.set(\"first_name\", pm.response.json().first_name); // В первом аргументе передается значение для названия переменной, во втором аргументе  передается путь к нужному ключу\r",
									"pm.collectionVariables.set(\"last_name\", pm.response.json().last_name); \r",
									"pm.collectionVariables.set(\"company_id\", pm.response.json().company_id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-21 UsersWithInvCompanyID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 99\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-22 UsersWithNullRequiredField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": null,\r\n  \"company_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-23 UserWithClosedCompaniesStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected msg\", function () { //Проверка возможности зарегистрировать неактивного пользователя\r",
									"    pm.expect(pm.response.json().detail.reason).to.include(\"You can only register with companies with ACTIVE status\");\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-24 UsersWithoutRequiredField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"company_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-25 GetCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"let jsonData = pm.response.json();  // Создается переменная которая ссылается на response body\r",
									"\r",
									"pm.test(\"Verify enums\", function(){ //Сравнение каждого ключа из \"response body\" с эквивалентным значением из локальной переменной\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);\r",
									"    pm.expect(jsonData.user_id).to.be.eql(user_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-26 GetInvCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/10010",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"10010"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-27 UserUpdate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Blez\"); //Установка значения в локальную переменную \r",
									"pm.collectionVariables.set(\"last_name\", \"Pascal\");\r",
									"pm.collectionVariables.set(\"company_id\", \"2\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\"); // Создается переменная которая ссылается на данные из переменной коллекции\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"let jsonData = pm.response.json();  // Создается переменная которая ссылается на response body\r",
									"\r",
									"pm.test(\"Verify enums\", function(){ //Создается тест, где сравниваются данные из response body с с данными из переменной коллекции\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);\r",
									"    pm.expect(jsonData.user_id).to.be.eql(user_id);    \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": {{company_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-28 InvCompaniesIDUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": \"Pascal\",\r\n  \"company_id\": 80\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-29 InvUserUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": \"Pascal\",\r\n  \"company_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/10010",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"10010"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-30 DeleteCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is object\", function(){\r",
									"    pm.expect(pm.response.json()).to.be.a(\"object\"); // Тест должен упасть, т.к. по схеме в ответе должен быть объект, а приходит null.\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.clear(); // Очищение данных из коллекции переменной"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let req = { // объявили переменную req\r",
									"    url: \"https://restapi.tech/api/users\", // на этот URL отправляем запрос\r",
									"    method: \"POST\", // Определяем метод\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\", // Определяем \"Content-Type\" нашего request body\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\", // определяем формат request body\r",
									"        raw: { // в ключ raw передаем JSON, для регистрации юзера\r",
									"            \"first_name\": \"qwe\",\r",
									"            \"last_name\": \"qwe\",\r",
									"            \"company_id\": 3, \r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {\r",
									"    // сетаем в локальную переменную user_id\r",
									"    pm.variables.set(\"user_id\", response.json().user_id); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-31 InvDeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/10010",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"10010"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "issues",
			"item": [
				{
					"name": "PM-32 IssuesCompanyesWithQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Len of JSON with limit=1\", function() { // Проверка работы query-параметра limit = 1\r",
									"    let companiesCount = pm.response.json().data.length; // объявена переменная значением которой является количество компаний из \"response\", обращенная к \"json\" и массиву \"data\"\r",
									"    pm.expect(companiesCount).to.eql(1); //Ожидается что переменная \"companiesCount\" должна быть эквивалентна 1\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"let offset = pm.variables.get(\"offset\"); // Объявление переменной значение которой получено из локальной переменной установленной в Pre-request\r",
									"\r",
									"pm.test(\"Verify offset\", function() {\r",
									"    pm.expect(DataJson[0].user_id).to.eql(offset); // Проверка что нулевой индекс из \"response.json().data\" равен offset \r",
									"});\r",
									"\r",
									"pm.test(\"Verify company status\", function(){ // Тест должен упасть, т.к. компания в json.data со статусом \"CLOSED\"\r",
									"    for(let company of pm.response.json().data){ // Объявляется переменная company, которая \"пробежится\" по ключу data\r",
									"        pm.expect(company.company_status).to.be.eql(\"ACTIVE\"); //В каждой итерации обращаемтся к ключу company_status и проверяет, что значение == \"ACTIVE\"\r",
									"    }\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"https://restapi.tech/api/issues/companies?limit=1&status=ACTIVE\", function (err, response) { //указывается URI запроса откуда нужно забрать данные\r",
									"    pm.variables.set(\"offset\", response.json().data.company_id); //Указывается, какие данные засетаются в локальную переменную\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/companies?limit=1&status=ACTIVE&offset=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "offset",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-33 IssuesCompanyByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Тест на время ответа от сервера должен упасть, т.к. превышает 500 мс\r",
									"\r",
									"pm.test(\"id in URI to eql id in JSON\", function () { //проверка что id из URL совпадает с company_id из json\r",
									"    let idURL = parseInt(pm.request.url.path[3]); // в переменной idURL сохраняется значение id из URL\r",
									"    let idJSON = pm.response.json().company_id; // в переменной idJSON сохраняется значение company_id из JSON\r",
									"    pm.expect(idURL).to.eql(idJSON); // этим выражением проверяется, что оба значения равны.\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() { // Проверка наличия ключей description или description_lang\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\") // Определяется наличия хотя бы одного из ключей. Если первый, второй ключи отсутствуют, тест выдается ошибка. В аргументах передаются проверяемые ключи.\r",
									"});\r",
									"\r",
									"if (pm.response.json().description_lang) { //выполняется при отсутствии ключа \"description\" и наличия \"description_lang\"\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")} //Указывается путь до первого ключа \"translation_lang\" и проверяется, что значение этого ключа \"EN\"\r",
									"    )};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/companies/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"companies",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-34 IssuesGetUserById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { // Тест должен упасть, т.к. статус код не соответствует 200\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\")); // Тест должен упасть, т.к. отсутствуют обязательные ключи\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"const req = { // Создание переменной для удаления пользователя созданного в pre-request\r",
									"    url: pm.variables.replaceIn(\"https://restapi.tech/api/users/{{user_id}}\"), //Метод replaceIn() предназначен для использования переменных в контексте строки \r",
									"    method: \"DELETE\",\r",
									"};\r",
									"pm.sendRequest(req, function (err, response) { // Запрос для удаления пользователя созданного в pre-request\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let req = { // объявили переменную req для создания пользователя\r",
									"    url: \"https://restapi.tech/api/users\", // на этот URL отправляем запрос\r",
									"    method: \"POST\", // Определяем метод\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\", // Определяем \"Content-Type\" нашего request body\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\", // определяем формат request body\r",
									"        raw: { // в ключ raw передаем JSON, для регистрации юзера\r",
									"            \"first_name\": \"qwe\",\r",
									"            \"last_name\": \"qwe\",\r",
									"            \"company_id\": 3, \r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {\r",
									"    pm.variables.set(\"user_id\", response.json().user_id); // сетаем в локальную переменную user_id\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-35 IssuesUserCreated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Pifagor\"); //Устанавливаем данные для переменной коллекции\r",
									"pm.collectionVariables.set(\"last_name\", \"Samosskiy\");\r",
									"pm.collectionVariables.set(\"company_id\", \"3\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\"); // Создаем переменную значением которой являются данные из переменной коллекции\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"\r",
									"let jsonData = pm.response.json();  // Создаем переменную которая ссылается на response body\r",
									"\r",
									"pm.test(\"Verify enums\", function(){ //Создаем тест, где сравниваем данные из pre-request с response body\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name); // Тест должен упасть, т.к. значения в request boby и response body отличаются\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"ResponseUser\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.clear(); // Очистка переменной коллекции"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": {{company_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-36 ClosedCompaniesUserUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected msg\", function () { //Проверка возможности обновить данные на неактивную компанию\r",
									"    pm.expect(pm.response.json().detail.reason).to.include(\"You can only register with companies with ACTIVE status\");\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let req = { // объявили переменную req\r",
									"    url: \"https://restapi.tech/api/users\", // на этот URL отправляем запрос\r",
									"    method: \"POST\", // Определяем метод\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\", // Определяем \"Content-Type\" нашего request body\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\", // определяем формат request body\r",
									"        raw: { // в ключ raw передаем JSON, для регистрации юзера\r",
									"            \"first_name\": \"Pifagor\",\r",
									"            \"last_name\": \"Samosskiy\",\r",
									"            \"company_id\": 3, \r",
									"            \r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {\r",
									"    // сетаем в локальную переменную user_id\r",
									"    pm.variables.set(\"user_id\", response.json().user_id); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-37 IssuesCompanyesWithInvStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/companies?status=abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-38 BankruptCompaniesUserUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected msg\", function () {  //Проверка возможности обновить данные на неактивную компанию\r",
									"    pm.expect(pm.response.json().detail.reason).to.include(\"You can only register with companies with ACTIVE status\"); \r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let req = { // объявили переменную req\r",
									"    url: \"https://restapi.tech/api/users\", // на этот URL отправляем запрос\r",
									"    method: \"POST\", // Определяем метод\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\", // Определяем \"Content-Type\" нашего request body\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\", // определяем формат request body\r",
									"        raw: { // в ключ raw передаем JSON, для регистрации юзера\r",
									"            \"first_name\": \"Pifagor\",\r",
									"            \"last_name\": \"Samosskiy\",\r",
									"            \"company_id\": 3, \r",
									"            \r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {\r",
									"    // сетаем в локальную переменную user_id\r",
									"    pm.variables.set(\"user_id\", response.json().user_id); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-39 UserWithIntInTheRequired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": 1,\r\n  \"company_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-40 UserWithBankruptCompaniesStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected msg\", function () {  //Проверка возможности обновить данные на неактивную компанию\r",
									"    pm.expect(pm.response.json().detail.reason).to.include(\"You can only register with companies with ACTIVE status\");\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Eric\",\r\n  \"last_name\": \"Cartman\",\r\n  \"company_id\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "create token",
					"item": [
						{
							"name": "auth-01 3simbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"token\", pm.response.json().token) //Устанавка токена в локальную переменную\r",
											"\r",
											"pm.test(\"Token received\", function(){ //Ожидается валидный токен и представленный в формате строка\r",
											"    pm.expect(pm.response.json().token).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qwe\",\r\n  \"password\": \"qwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-02 7simbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Token received\", function(){ //Ожидается валидный токен и представленный в формате строка\r",
											"    pm.expect(pm.response.json().token).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qwertyy\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-03 1simbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"q\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-04 2simbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qw\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-05 0simbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-06 NoLogin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-07 NoPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qwerty\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-08 invalidPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"}); \r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"string\",\r\n  \"password\": \"qwerty1234\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-09 EmptyPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"}); \r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"DetailReason\"));\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"string\",\r\n  \"password\": \"\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get info about user",
					"item": [
						{
							"name": "auth-10 Valid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-11 Invalid token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let token = pm.environment.get(\"token\");  // берем токен из локального окружения\r",
											"let tokenNew = token.slice(0, -10) + \"qwe1rty3BB\";  // срезаем 10 последних символов и добавляем новые символы\r",
											"\r",
											"pm.variables.set(\"token\", tokenNew);  // сохраняем в локальную переменную \"token\""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-12 Expired token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const req = { // объявили переменную req\r",
											"    url: \"https://restapi.tech/api/auth/authorize\", // на этот URL отправляем запрос\r",
											"    method: \"POST\", // Определяем метод\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\", // Определяем \"Content-Type\" нашего request body\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\", // определяем формат request body\r",
											"        raw: { // в ключ raw передаем JSON, который мы отправляли в С-01\r",
											"            \"login\": \"Abc\",\r",
											"            \"password\": \"qwerty12345\",\r",
											"            \"timeout\": 3, // не забываем изменить время жизни токена на более короткий период\r",
											"        },\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(req, function (err, response) { // передаем переменную req первым аргументом\r",
											"    pm.variables.set(\"token\", response.json().token) // сохраняем в локальную переменную актуальный токен\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, 5000); // ставим ожидание в 5 секунд, что-бы токен успел истечь"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth-13 No token",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "x-token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 500ms\", function () { //проверка времени ответа от сервера для всей коллекции\r",
					"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
					"});\r",
					"\r",
					"if (pm.request.url.protocol === \"https\" & pm.request.method != \"HEAD\") { //проверка хедеров для всей коллекции, за исключением запросов с методом HEAD и протоколом http\r",
					"    pm.test(\"Headers is valid\", () => {\r",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
					"        pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
					"    });\r",
					"};"
				]
			}
		}
	]
}